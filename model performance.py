{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e322d9f9-bf42-4465-ad70-727736521c15",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.ensemble import IsolationForest\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.neighbors import LocalOutlierFactor\n",
    "from sklearn.svm import OneClassSVM\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.metrics import accuracy_score\n",
    "from hdbscan import HDBSCAN\n",
    "from sklearn.cluster import DBSCAN\n",
    "# Load the data\n",
    "data = pd.read_csv('reduced_variables.csv')\n",
    "\n",
    "# Handle missing values with SimpleImputer\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "data_imputed = pd.DataFrame(imputer.fit_transform(data), columns=data.columns)\n",
    "\n",
    "# Define preprocessing steps\n",
    "preprocessor = StandardScaler()\n",
    "\n",
    "# Fit preprocessing on the data\n",
    "X = data_imputed.drop(columns=['Outlier']) if 'Outlier' in data_imputed.columns else data_imputed\n",
    "X_preprocessed = preprocessor.fit_transform(X)\n",
    "\n",
    "# Separate the data into training and testing sets\n",
    "X_train, X_test, _, _ = train_test_split(X_preprocessed, X_preprocessed, test_size=0.3, random_state=42)\n",
    "\n",
    "# Define and fit Isolation Forest\n",
    "iforest = IsolationForest(n_estimators=50, contamination='auto', random_state=42)\n",
    "iforest.fit(X_train)\n",
    "\n",
    "# Detect outliers using Isolation Forest\n",
    "outlier_preds = iforest.predict(X_test)\n",
    "\n",
    "# Apply DBSCAN\n",
    "dbscan = DBSCAN(eps=0.5, min_samples=5)\n",
    "predictions_dbscan = dbscan.fit_predict(X_test)\n",
    "\n",
    "# Apply HDBSCAN\n",
    "hdbscan = HDBSCAN(min_cluster_size=5)\n",
    "predictions_hdbscan = hdbscan.fit_predict(X_test)\n",
    "\n",
    "# Apply KMeans\n",
    "kmeans = KMeans(n_clusters=2, random_state=42)\n",
    "predictions_kmeans = kmeans.fit_predict(X_test)\n",
    "\n",
    "# Apply Local Outlier Factor (LOF) with novelty=False\n",
    "lof = LocalOutlierFactor(novelty=False, contamination='auto')\n",
    "predictions_lof = lof.fit_predict(X_test)\n",
    "\n",
    "# Apply One-Class SVM\n",
    "svm = OneClassSVM(kernel='rbf', nu=0.05)\n",
    "predictions_svm = svm.fit_predict(X_test)\n",
    "\n",
    "# Calculate accuracy for DBSCAN, HDBSCAN, KMeans, LOF, and One-Class SVM\n",
    "accuracy_dbscan = accuracy_score(outlier_preds, predictions_dbscan)\n",
    "accuracy_hdbscan = accuracy_score(outlier_preds, predictions_hdbscan)\n",
    "accuracy_kmeans = accuracy_score(outlier_preds, predictions_kmeans)\n",
    "accuracy_lof = accuracy_score(outlier_preds, predictions_lof)\n",
    "accuracy_svm = accuracy_score(outlier_preds, predictions_svm)\n",
    "\n",
    "# Calculate accuracy for Isolation Forest\n",
    "accuracy_iforest = accuracy_score(outlier_preds, outlier_preds)\n",
    "\n",
    "print(f\"Accuracy for DBSCAN: {accuracy_dbscan}\")\n",
    "print(f\"Accuracy for HDBSCAN: {accuracy_hdbscan}\")\n",
    "print(f\"Accuracy for KMeans: {accuracy_kmeans}\")\n",
    "print(f\"Accuracy for Local Outlier Factor: {accuracy_lof}\")\n",
    "print(f\"Accuracy for One-Class SVM: {accuracy_svm}\")\n",
    "print(f\"Accuracy for Isolation Forest: {accuracy_iforest}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
